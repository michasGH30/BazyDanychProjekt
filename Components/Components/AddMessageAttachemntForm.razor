@inject IAttachmentsService attachmentsService
@inject IMessagesService messagedService
@inject IUsersService userService

@if (IsMessage)
{
    <EditForm FormName="AddNewMessage" Model="@addMessage" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group my-2">
            <InputText id="message" type="text" class="form-control" @bind-Value="addMessage.Message" placeholder="Enter your message"></InputText>
        </div>
        @if (MessageID != null || AttachmentID != null)
        {
            <button class="btn btn-warning"><Icon Name="IconName.Pencil" /> Modify</button>
        }
        else
        {
            <button class="btn btn-success"><Icon Name="IconName.Plus" /> Add</button>
        }
    </EditForm>
}
else
{
    @if (typesOfAttachments.Count > 0)
    {
        <EditForm FormName="AddNewAttachment" Model="@addAttachment" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group my-2">
                <InputText id="name" type="text" class="form-control" @bind-Value="addAttachment.Name" placeholder="Enter attachment name"></InputText>
            </div>
            <div class="form-group my-2">
                <InputSelect @bind-Value="addAttachment.TypeOfAttachment" class="form-control">
                    <option value="0">---</option>
                    @foreach (TypesOfAttachmentsResponse type in typesOfAttachments)
                    {
                        <option value="@type.ID">@type.Type</option>
                    }
                </InputSelect>
            </div>
            @if (MessageID != null || AttachmentID != null)
            {
                <button class="btn btn-warning"><Icon Name="IconName.Pencil" /> Modify</button>
            }
            else
            {
                <button class="btn btn-success"><Icon Name="IconName.Plus" /> Add</button>
            }
        </EditForm>
    }
}


@code {
    AddNewMessageRequest addMessage = new();
    AddNewAttachmentRequest addAttachment = new();
    List<TypesOfAttachmentsResponse> typesOfAttachments = [];

    [Inject]
    protected ToastService toastService { get; set; }

    [Parameter]
    public int MeetingID { get; set; }

    [Parameter]
    public bool IsMessage { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> CloseModalCallback { get; set; }

    [Parameter]
    public List<MeetingMessage> MessagesList { get; set; }

    [Parameter]
    public List<MeetingAttachment> AttachmentsList { get; set; }

    [Parameter]
    public int? MessageID { get; set; }

    [Parameter]
    public string? Message { get; set; }

    [Parameter]
    public int? AttachmentID { get; set; }

    [Parameter]
    public string? AttachmentName { get; set; }

    [Parameter]
    public int? TypeOfAttachment { get; set; }

    protected override async Task OnInitializedAsync()
    {
        typesOfAttachments = await attachmentsService.GetAttachmentsTypes();
        addMessage.MeetingID = MeetingID;
        addMessage.Message = Message ?? string.Empty;
        addMessage.ID = MessageID ?? 0;

        addAttachment.MettingID = MeetingID;
        addAttachment.Name = AttachmentName ?? string.Empty;
        addAttachment.TypeOfAttachment = TypeOfAttachment ?? 0;
        addAttachment.ID = AttachmentID ?? 0;
    }

    private async Task OnValidSubmit()
    {
        if (IsMessage)
        {
            var response = MessageID == null ? await messagedService.SendNewMessage(addMessage) : await messagedService.UpdateMessage(addMessage);
            if (response.IsSuccess)
            {
                if (MessageID == null)
                {
                    MessagesList.Add(new()
                        {
                            ID = response.ID,
                            Message = addMessage.Message,
                            Sender = await userService.GetUserById(response.SenderID),
                            IsSender = true
                        });
                }
                else
                {
                    MessagesList.First(m => m.ID == response.ID).Message = addMessage.Message;
                }

                addMessage.Message = string.Empty;
                toastService.Notify(new(ToastType.Success, MessageID == null ? "Successfully added new message" : "Successfully modified message"));
                await CloseModalCallback.InvokeAsync();
            }
            else
            {
                toastService.Notify(new(ToastType.Danger, MessageID == null ? "Unsuccessfully added new message" : "Unsuccessfully modified message"));
            }
        }
        else
        {
            var response = AttachmentID == null ? await attachmentsService.AddNewAttachment(addAttachment) : await attachmentsService.UpdateAttachment(addAttachment);
            if (response.IsSuccess)
            {
                if (AttachmentID == null)
                {
                    AttachmentsList.Add(new()
                        {
                            ID = response.ID,
                            Name = addAttachment.Name,
                            Type = await attachmentsService.GetTypeByID(addAttachment.TypeOfAttachment),
                            Sender = await userService.GetUserById(response.SenderID),
                            IsSender = true
                        });
                }
                else
                {
                    var change = AttachmentsList.First(a => a.ID == response.ID);
                    change.Name = addAttachment.Name;
                    change.Type = await attachmentsService.GetTypeByID(addAttachment.TypeOfAttachment);
                }

                addAttachment.TypeOfAttachment = 0;
                addAttachment.Name = "";
                toastService.Notify(new(ToastType.Success, AttachmentID == null ? "Successfully added new attachment" : "Successfully modified attachment"));
                await CloseModalCallback.InvokeAsync();
            }
            else
            {
                toastService.Notify(new(ToastType.Danger, AttachmentID == null ? "Unsuccessfully added new attachment" : "Unsuccessfully modified attachment"));
            }
        }
    }
}
