@page "/manage"
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject IProfileService profileService
@inject IDepartmentService departmentsService
@inject ITeamsService teamsService
@inject IUsersService userService
@attribute [StreamRendering(true)]
<PageTitle>Manage</PageTitle>
<Modal @ref="modal" />
<div class="container-fluid">
    <div class="row">
        <div class="col-12 d-flex justify-content-center my-1">
            <h1>Manage</h1>
        </div>
    </div>

    @if (!isLogged)
    {
        <div class="row">
            <div class="col-12 d-flex justify-content-center my-1">
                <p>Loading...</p>
            </div>
        </div>

    }
    else
    {
        <!-- all users view -->
        <div class="row">
            @if (profileResponse == null)
            {
                <div class="col-12 d-flex justify-content-center my-1">
                    <p>Loading profile</p>
                </div>
            }
            else
            {
                <div class="col-12 d-flex justify-content-center my-1">
                    <div class="col-4">
                        <h2>Your profile</h2>
                        <p><b>First name: </b>@profileResponse.FirstName</p><br />
                        <p><b>Last name: </b>@profileResponse.LastName</p><br />
                        <p><b>Email: </b>@profileResponse.Email</p>
                    </div>
                    <div class="col-8 d-flex justify-content-start align-content-center flex-wrap">
                        <Button Color="ButtonColor.Warning" @onclick="OnClickChangeProfile"><Icon Name="IconName.Pencil" /> Modify profile</Button>
                    </div>

                </div>

            }
        </div>
        <!-- admin view -->
        if (roles.Contains("admin"))
        {
            <hr class="hr" />
            <div class="row">
                <div class="col-3">
                    @if (allDepartments != null)
                    {
                        <h2>All Departments</h2>
                        @if (allDepartments.Count > 0)
                        {
                            foreach (var department in allDepartments)
                            {
                                <hr class="hr" />
                                <DepartmentComponent department="department" />
                            }
                        }
                        else
                        {
                            <p>No departments in database.</p>
                        }
                    }
                    else
                    {
                        <p>Loading departments.</p>
                    }
                </div>
                <div class="col-3">
                    @if (allTeams != null)
                    {
                        <h2>All Teams</h2>
                        @if (allTeams.Count > 0)
                        {
                            foreach (Team team in allTeams)
                            {
                                <TeamComponent team="team" />
                            }

                        }
                        else
                        {
                            <p>No teams in database.</p>
                        }
                    }
                    else
                    {
                        <p>Loading teams.</p>
                    }
                </div>
                <div class="col-3">
                    @if (allUsers != null)
                    {
                        <h2>All users</h2>
                        @if (allUsers.Count > 0)
                        {
                            <Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="ToggleContentAllUsersAsync"><Icon Name="@iconNameAllUsers" /> Toggle all users</Button>
                            <Collapse @ref="collapseAllUsers">
                                @foreach (User user in allUsers)
                                {
                                    <UserComponent user="user" />
                                }
                            </Collapse>

                        }
                        else
                        {
                            <p>No users in database.</p>
                        }
                    }
                    else
                    {
                        <p>Loading all users.</p>
                    }
                </div>
                <div class="col-3">
                    @if (freeUsers != null)
                    {
                        <h2>Free users</h2>
                        @if (freeUsers.Count > 0)
                        {
                            <Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="ToggleContentFreeUsersAsync"><Icon Name="@iconNameFreeUsers" /> Toggle free users</Button>
                            <Collapse @ref="collapseFreeUsers">
                                @foreach (User user in freeUsers)
                                {
                                    <UserComponent user="user" />
                                }
                            </Collapse>
                        }
                        else
                        {
                            <p>No free users in database.</p>
                        }
                    }
                    else
                    {
                        <p>Loading free users.</p>
                    }
                </div>
            </div>
        }
        <!-- director view -->
        if (directorMyDepartment != null && roles.Contains("director"))
        {
            <div class="row">
                <div class="col-12 d-flex justify-content-center my-1">
                    <h2>My department</h2>
                    <DepartmentComponent department="directorMyDepartment" />
                </div>
            </div>

        }
        <!-- leader view -->
        if (leaderMyTeam != null && roles.Contains("leader"))
        {
            <div class="row">
                <div class="col-12 d-flex justify-content-center my-1">
                    <h2>My team</h2>
                    <TeamComponent team="leaderMyTeam" />
                </div>
            </div>
        }

    }
</div>
@code {
    private Modal modal = default!;
    bool isLogged = false;
    User profileResponse;
    string[] roles;
    List<Team> allTeams;
    List<DepartmentByIDResponse> allDepartments;
    List<User> allUsers;
    List<User> freeUsers;
    DepartmentByIDResponse directorMyDepartment;
    Team leaderMyTeam;
    Collapse collapseAllUsers = default!;
    IconName iconNameAllUsers;
    Collapse collapseFreeUsers = default!;
    IconName iconNameFreeUsers;

    protected override async Task OnInitializedAsync()
    {
        isLogged = await loginService.IsLogged();

        if (!isLogged)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {

            iconNameAllUsers = IconName.ArrowsExpand;
            iconNameFreeUsers = IconName.ArrowsExpand;
            var response = await loginService.GetRoles();
            roles = response.Split(",");

            // all users got their profile informations
            profileResponse = await profileService.GetProfile();

            if (roles.Contains("admin"))
            {
                // all departments, all teams and all users which aren't in any team or department
                allDepartments = await departmentsService.GetAllDepartments();
                allTeams = await teamsService.GetAllTeams();
                allUsers = await userService.GetAllUsers();
                freeUsers = await userService.GetFreeUsers();
            }
            if (roles.Contains("director"))
            {
                // info about department and teams in department
                directorMyDepartment = await departmentsService.GetMyDepartment();
            }
            if (roles.Contains("leader"))
            {
                // info about team and users in team
                leaderMyTeam = await teamsService.GetMyTeam();
            }
        }
    }

    private async Task ToggleContentAllUsersAsync()
    {
        iconNameAllUsers = iconNameAllUsers == IconName.ArrowsExpand ? IconName.ArrowsCollapse : IconName.ArrowsExpand;
        await collapseAllUsers.ToggleAsync();

    }

    private async Task ToggleContentFreeUsersAsync()
    {
        iconNameFreeUsers = iconNameFreeUsers == IconName.ArrowsExpand ? IconName.ArrowsCollapse : IconName.ArrowsExpand;
        await collapseFreeUsers.ToggleAsync();

    }

    protected async Task OnClickChangeProfile(EventArgs args)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("User", profileResponse);
        parameters.Add("CloseModalCallback", EventCallback.Factory.Create<MouseEventArgs>(this, CloseModalCallback));
        await modal.ShowAsync<ChangeUserForm>(title: "Edit profile", parameters: parameters);
    }

    protected async Task CloseModalCallback(MouseEventArgs e)
    {
        await modal.HideAsync();
        StateHasChanged();
    }
}
