@page "/meeting/{meetingID:int}"
@inject ILoginService loginService
@inject NavigationManager navigationManager
@inject IMeetingsService meetingService
@inject IMessagesService messagesService
@inject IAttachmentsService attachmentService
@attribute [StreamRendering(true)]
<PageTitle>Meeting Details</PageTitle>
<Modal @ref="modal" />
<ConfirmDialog @ref="dialog" />
<div class="container-fluid">
    <div class="row">
        <div class="col-12 d-flex justify-content-center my-1">
            <h1>Meeting Details</h1>
        </div>
    </div>

    <div class="row">
        @if (!isLogged)
        {
            <div class="col-12 d-flex justify-content-center my-1">
                <p>Loading ...</p>
            </div>
        }
        else
        {
            if (meeting != null)
            {
                <div class="col-8">
                    <div class="row">

                        <div class="@styleClass">
                            <p><b>Title:</b> @meeting.Title</p>
                            <p><b>Date:</b> @meeting.Date</p>
                            <p><b>Type:</b> @Utility.Capitalise(meeting.TypeOfMeeting)</p>
                            <p style="white-space: pre-line"><b>Description: </b><br />@meeting.Description</p>
                            <p><b>Repetition:</b> @Utility.Capitalise(meeting.RepetitionOfMeeting)</p>
                            @switch (meeting.StatusOfMeeting)
                            {
                                case "scheduled":
                                    <Alert Color="AlertColor.Success">@Utility.Capitalise(meeting.StatusOfMeeting)</Alert>
                                    break;
                                case "rescheduled":
                                    <Alert Color="AlertColor.Warning">@Utility.Capitalise(meeting.StatusOfMeeting)</Alert>
                                    break;
                                case "cancelled":
                                    <Alert Color="AlertColor.Danger">@Utility.Capitalise(meeting.StatusOfMeeting)</Alert>
                                    break;
                            }
                        </div>
                        <div class="@styleClass">
                            <Button Color="ButtonColor.Primary" Class="my-1 mx-1" @onclick="((args)=>OnClickAddUpdateMessage(args,null,null))"><Icon Name="IconName.ChatRightText" /> Add new message</Button>
                            <Button Color="ButtonColor.Secondary" Class="my-1 mx-1" @onclick="((args)=>OnClickAddUpdateAttachment(args,null,null,null))"><Icon Name="IconName.FileArrowUp" /> Add new attachment</Button>
                        </div>
                        @if (meeting.IsCreator)
                        {
                            <div class="@styleClass">
                                <Button Color="ButtonColor.Warning" @onclick="((args) => OnClickUpdate(args,meeting.ID))" Class="mx-1 my-1"><Icon Name="IconName.Pencil" /> Modify</Button>
                                <Button Color="ButtonColor.Danger" @onclick="((args) => OnCLickDelete(args,meeting.ID))" Class="mx-1 my-1"><Icon Name="IconName.Trash" /> Delete</Button>
                            </div>
                        }
                        <h3>Creator</h3>
                        <UserComponent user="@meeting.Creator" />
                    </div>
                    <div class="row">
                        <div class="col-6">
                            <h3>Messages</h3>
                            @if (meeting.Messages.Count > 0)
                            {
                                <Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="ToggleContentMessagesAsync"><Icon Name="@iconNameMessages" /> Toggle messages</Button>
                                <Collapse @ref="collapseMessages">
                                    @foreach (MeetingMessage message in meeting.Messages)
                                    {
                                        <Card Class="my-2">
                                            <CardBody>
                                                <h4>Message send by:</h4>
                                                <UserComponent user="message.Sender" />
                                                <p><b>Message:</b> @message.Message</p>
                                                @if (message.IsSender)
                                                {
                                                    <Button Color="ButtonColor.Warning" Class="mx-1 my-1" @onclick="((args) => OnClickAddUpdateMessage(args, message.ID, message.Message))"><Icon Name="IconName.Pencil" /> Update message</Button>
                                                    <Button Color="ButtonColor.Danger" Class="mx-1 my-1" @onclick="((args) => OnClickDeleteMessage(args,message.ID))"><Icon Name="IconName.Trash" /> Delete message</Button>
                                                }
                                            </CardBody>
                                        </Card>

                                    }
                                </Collapse>
                            }
                            else
                            {
                                <Card>
                                    <CardBody>
                                        <p>This meeting has no messages</p>
                                    </CardBody>
                                </Card>
                            }
                        </div>
                        <div class="col-6">
                            <h3>Attachments</h3>
                            @if (meeting.Attachments.Count > 0)
                            {
                                <Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="ToggleContentAttachmentsAsync"><Icon Name="@iconNameAttachments" /> Toggle attachments</Button>
                                <Collapse @ref="collapseAttachments">
                                    @foreach (MeetingAttachment attachment in meeting.Attachments)
                                    {
                                        <Card Class="my-2">
                                            <CardBody>
                                                <h4>Attachment send by:</h4>
                                                <UserComponent user="attachment.Sender" />
                                                <p><b>File name:</b> @attachment.Name</p>
                                                <p>
                                                    <b>File type: </b>
                                                    @switch (attachment.Type)
                                                    {
                                                        case "Word Document":
                                                            <Icon Name="IconName.FileEarmarkWord" Size="IconSize.x4" />
                                                            break;
                                                        case "PDF Document":
                                                            <Icon Name="IconName.FileEarmarkPdf" Size="IconSize.x4" />
                                                            break;
                                                        case "Image":
                                                            <Icon Name="IconName.FileEarmarkImage" Size="IconSize.x4" />
                                                            break;
                                                        case "Audio":
                                                            <Icon Name="IconName.FileEarmarkMusic" Size="IconSize.x4" />
                                                            break;
                                                        case "Video":
                                                            <Icon Name="IconName.FileEarmarkPlay" Size="IconSize.x4" />
                                                            break;
                                                        case "Spreadsheet":
                                                            <Icon Name="IconName.FileEarmarkExcel" Size="IconSize.x4" />
                                                            break;
                                                        case "Presentation":
                                                            <Icon Name="IconName.FileEarmarkPpt" Size="IconSize.x4" />
                                                            break;
                                                        case "Code":
                                                            <Icon Name="IconName.FileEarmarkCode" Size="IconSize.x4" />
                                                            break;
                                                        case "Zip File":
                                                            <Icon Name="IconName.FileEarmarkZip" Size="IconSize.x4" />
                                                            break;
                                                    }
                                                </p>
                                                @if (attachment.IsSender)
                                                {
                                                    <Button Color="ButtonColor.Warning" Class="mx-1 my-1" @onclick="((args) => OnClickAddUpdateAttachment(args,attachment.ID, attachment.Name, attachment.Type))"><Icon Name="IconName.Pencil" /> Modify attachment</Button>
                                                    <Button Color="ButtonColor.Danger" Class="mx-1 my-1" @onclick="((args) => OnClickDeleteAttachment(args,attachment.ID))"><Icon Name="IconName.Trash" /> Delete attachment</Button>
                                                }
                                            </CardBody>
                                        </Card>

                                    }
                                </Collapse>
                            }
                            else
                            {
                                <Card>
                                    <CardBody>
                                        <p>This meeting has no attachments</p>
                                    </CardBody>
                                </Card>
                            }
                        </div>
                    </div>
                </div>
                <div class="col-4">
                    <h3>Members</h3>
                    @if (meeting.Members.Count > 0)
                    {
                        foreach (User user in meeting.Members)
                        {
                            <UserComponent user="user" />
                        }
                    }
                    else
                    {
                        <Card>
                            <CardBody>
                                <p>This meeting has no members</p>
                            </CardBody>
                        </Card>
                    }
                </div>
            }
            else
            {
                <p>Some issue with meeting details</p>
            }
        }
    </div>
    <Footer />
</div>

@code {
    private Modal modal = default!;
    private ConfirmDialog dialog = default!;
    [Parameter]
    public int meetingID { get; set; }
    [Inject]
    protected ToastService toastService { get; set; }
    bool isLogged = false;
    Meeting meeting;
    string styleClass = "";
    string[] roles;
    Collapse collapseMessages = default!;
    IconName iconNameMessages;
    Collapse collapseAttachments = default!;
    IconName iconNameAttachments;
    protected override async Task OnInitializedAsync()
    {
        isLogged = await loginService.IsLogged();
        if (!isLogged)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            iconNameMessages = IconName.ArrowsExpand;
            iconNameAttachments = IconName.ArrowsExpand;
            meeting = await meetingService.GetMeetingByID(meetingID);
            if (meeting.Description.Equals("Empty description"))
            {
                meeting.Description = "";
            }
            var rolesResponse = await loginService.GetRoles();
            roles = rolesResponse.Split(",");
            if (roles.Contains("admin"))
            {
                meeting.IsCreator = true;
                meeting.Attachments.ForEach(a => a.IsSender = true);
                meeting.Messages.ForEach(m => m.IsSender = true);
            }
            if (meeting.IsCreator)
            {
                styleClass = "col-4";
            }
            else
            {
                styleClass = "col-6";
            }
        }
    }

    private async Task ToggleContentMessagesAsync()
    {
        iconNameMessages = iconNameMessages == IconName.ArrowsExpand ? IconName.ArrowsCollapse : IconName.ArrowsExpand;
        await collapseMessages.ToggleAsync();

    }

    private async Task ToggleContentAttachmentsAsync()
    {
        iconNameAttachments = iconNameAttachments == IconName.ArrowsExpand ? IconName.ArrowsCollapse : IconName.ArrowsExpand;
        await collapseAttachments.ToggleAsync();
    }

    protected async Task OnClickAddUpdateMessage(EventArgs args, int? ID, string? message)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("MeetingID", meeting.ID);
        parameters.Add("IsMessage", true);
        parameters.Add("MessagesList", meeting.Messages);
        parameters.Add("AttachmentsList", meeting.Attachments);
        parameters.Add("MessageID", ID);
        parameters.Add("Message", message);
        parameters.Add("AttachmentID", null);
        parameters.Add("AttachmentName", null);
        parameters.Add("TypeOfAttachment", null);
        parameters.Add("CloseModalCallback", EventCallback.Factory.Create<MouseEventArgs>(this, CloseModalCallback));
        await modal.ShowAsync<AddMessageAttachemntForm>(title: ID == null ? "New message" : "Modify message", parameters: parameters);
    }

    protected async Task OnClickAddUpdateAttachment(EventArgs args, int? ID, string? name, string? type)
    {
        var parameters = new Dictionary<string, object>();
        int typeOfAttachment = 0;
        parameters.Add("MeetingID", meeting.ID);
        parameters.Add("IsMessage", false);
        parameters.Add("MessagesList", meeting.Messages);
        parameters.Add("AttachmentsList", meeting.Attachments);
        parameters.Add("MessageID", null);
        parameters.Add("Message", null);
        parameters.Add("AttachmentID", ID);
        parameters.Add("AttachmentName", name);
        if (type != null)
        {
            var response = await attachmentService.GetAttachmentsTypes();
            typeOfAttachment = response.First(t => t.Type.Equals(type)).ID;
            parameters.Add("TypeOfAttachment", typeOfAttachment);
        }
        else
        {
            parameters.Add("TypeOfAttachment", type);
        }
        parameters.Add("CloseModalCallback", EventCallback.Factory.Create<MouseEventArgs>(this, CloseModalCallback));
        await modal.ShowAsync<AddMessageAttachemntForm>(title: ID == null ? "New Attachment" : "Modify attachment", parameters: parameters);
    }

    protected async Task OnClickDeleteMessage(EventArgs args, int ID)
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "OK",
                YesButtonColor = ButtonColor.Success,
                NoButtonText = "CANCEL",
                NoButtonColor = ButtonColor.Danger
            };

        var confirmation = await dialog.ShowAsync(
            title: "Are you sure you want to delete this message?",
            message1: "Do you want to proceed?",
        confirmDialogOptions: options);

        if (confirmation)
        {
            bool success = await messagesService.DeleteMessageByID(ID);
            if (success)
            {
                toastService.Notify(new(ToastType.Success, "Successfully deleted message"));
                meeting.Messages.RemoveAll(m => m.ID == ID);
                StateHasChanged();
            }
            else
            {
                toastService.Notify(new(ToastType.Danger, "Unsuccessfully deleted message"));
            }
        }
    }

    protected async Task OnClickDeleteAttachment(EventArgs args, int ID)
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "OK",
                YesButtonColor = ButtonColor.Success,
                NoButtonText = "CANCEL",
                NoButtonColor = ButtonColor.Danger
            };

        var confirmation = await dialog.ShowAsync(
            title: "Are you sure you want to delete this attachment?",
            message1: "Do you want to proceed?",
        confirmDialogOptions: options);

        if (confirmation)
        {
            bool success = await attachmentService.DeleteAttachmentByID(ID);
            if (success)
            {
                toastService.Notify(new(ToastType.Success, "Successfully deleted attachment"));
                meeting.Attachments.RemoveAll(a => a.ID == ID);
                StateHasChanged();
            }
            else
            {
                toastService.Notify(new(ToastType.Danger, "Unsuccessfully deleted attachment"));
            }
        }
    }

    protected async Task CloseModalCallback(MouseEventArgs e)
    {
        await modal.HideAsync();
        StateHasChanged();
    }

    protected void OnClickUpdate(EventArgs args, int id)
    {
        navigationManager.NavigateTo($"/meetingForm/{id}");
    }

    protected async void OnCLickDelete(EventArgs args, int id)
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "OK",
                YesButtonColor = ButtonColor.Success,
                NoButtonText = "CANCEL",
                NoButtonColor = ButtonColor.Danger
            };

        var confirmation = await dialog.ShowAsync(
            title: "Are you sure you want to delete this meeting?",
            message1: "Do you want to proceed?",
        confirmDialogOptions: options);

        if (confirmation)
        {
            bool success = await meetingService.DeleteMeetingByID(id);
            if (success)
            {
                toastService.Notify(new(ToastType.Success, "Successfully deleted meeting"));
                navigationManager.NavigateTo("/");
            }
            else
            {
                toastService.Notify(new(ToastType.Danger, "Unsuccessfully deleted meeting"));
            }
        }

    }
}
