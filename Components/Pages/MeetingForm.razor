@page "/meetingForm"
@page "/meetingForm/{meetingID:int}"
@inject ILoginService loginService
@inject IMeetingsService meetingService
@inject IUsersService usersService
@inject NavigationManager navigationManager

@if(!isLogged)
{
	<p>Loading ...</p>
}
else
{
	@if (meetingID.HasValue)
	{
		<PageTitle>Update Meeting</PageTitle>
	}
	else
	{
		<PageTitle>Create New Meeting</PageTitle>

	}
	<div class="container-fluid">
		<div class="row">
			@if (meetingID.HasValue)
			{
				<h3>Update Meeting</h3>
			}
			else
			{
				<h3>Create New Meeting</h3>

			}
		</div>
		<div class="row">
			<div class="col-md-3">
				<EditForm Model="request" FormName="CreateMeeting" OnValidSubmit="OnValidSubmit">
					<DataAnnotationsValidator />
					<ValidationSummary />
					<div class="form-group my-2">
						<InputText id="name" @bind-Value="request.Title" placeholder="Title" type="text" class="form-control"></InputText>

					</div>
					<div class="form-group my-2">
						<DateInput TValue="DateOnly" @bind-Value="request.Date" Placeholder="Date" Min="@minDate" Max="@maxDate" EnableMinMax="true" />
					</div>
					<div class="form-group my-2">
						<InputSelect @bind-Value="request.RepetitionOfMeeting">
							@foreach (TypeStatusRepetitionOfMeetingResponse r in repetitions)
							{
								<option value="@r.ID">@r.Name</option>
							}
						</InputSelect>
					</div>
					<div class="form-group my-2">
						<InputSelect @bind-Value="request.TypeOfMeeting">
							@foreach (TypeStatusRepetitionOfMeetingResponse t in types)
							{
								<option value="@t.ID">@t.Name</option>
							}
						</InputSelect>
					</div>
					@if(meetingID.HasValue)
					{
						<div class="form-group my-2">
							<InputSelect @bind-Value="request.StatusOfMeeting">
								@foreach (TypeStatusRepetitionOfMeetingResponse s in statuses)
								{
									<option value="@s.ID">@s.Name</option>
								}
							</InputSelect>
						</div>
					}
					<div class="form-group my-2">
						@foreach (UserForm u in userForms)
						{
							<label>
								@u.Name <InputCheckbox @bind-Value="u.IsSelected" />
							</label>

							<br />
						}
					</div>
					<button class="btn btn-primary">SUBMIT</button>
				</EditForm>
			</div>
		</div>
	</div>
	
}

@code {
	[Parameter]
	public int? meetingID { get; set; }
	CreateMeetingRequest request = new();
	private DateOnly minDate;
	private DateOnly maxDate;
	private List<TypeStatusRepetitionOfMeetingResponse> types;
	private List<TypeStatusRepetitionOfMeetingResponse> repetitions;
	private List<TypeStatusRepetitionOfMeetingResponse> statuses;
	private bool isLogged = false;
	private List<User> users;
	private List<UserForm> userForms = [];
	[Inject]
	public ToastService toastService { get; set; }
	private Meeting meeting;

	protected override async Task OnInitializedAsync()
	{
		isLogged = await loginService.IsLogged();
		if(!isLogged)
		{
			navigationManager.NavigateTo("/login");
		}
		else
		{
			minDate = DateOnly.FromDateTime(DateTime.Now.AddYears(-1));
			maxDate = DateOnly.FromDateTime(DateTime.Now.AddYears(1));
			types = await meetingService.GetTypesOfMeeting();
			repetitions = await meetingService.GetRepetitionOfMeeting();
			users = await usersService.GetAllUsers();
			userForms = users.Select(user => new UserForm(user)).ToList();
			if(meetingID.HasValue)
			{
				statuses = await meetingService.GetStatusesOfMeeting();
				meeting = await meetingService.GetMeetingByID(meetingID.Value);
				request.ID = meetingID.Value;
				request.Title = meeting.Title;
				request.Date = meeting.Date;
				foreach (var rep in repetitions)
				{
					if(rep.Name.Equals(meeting.RepetitionOfMeeting))
					{
						request.RepetitionOfMeeting = rep.ID;
					}
				}
				foreach(var type in types)
				{
					if(type.Name.Equals(meeting.TypeOfMeeting))
					{
						request.TypeOfMeeting = type.ID;
					}
				}
				foreach(var status in statuses)
				{
					if(status.Name.Equals(meeting.StatusOfMeeting))
					{
						request.StatusOfMeeting = status.ID;
					}
				}
				foreach(UserForm userForm in userForms)
				{
					foreach(User user in meeting.Members)
					{
						if(userForm.ID == user.ID)
						{
							userForm.IsSelected = true;
						}
					}
				}
			}
		}

	}

	private async Task OnValidSubmit()
	{
		request.MembersID = userForms.Where(u => u.IsSelected).Select(u => u.ID).ToList();

		if(meetingID.HasValue)
		{
			var response = await meetingService.UpdateMeeting(request);

			if(response)
			{
				toastService.Notify(new(ToastType.Success, "Successfully updated meeting"));
				navigationManager.NavigateTo("/");
			}
			else
			{
				toastService.Notify(new(ToastType.Danger, "There was error with updating of meeting try again later"));
			}
		}
		else
		{
			var response = await meetingService.CreateMeeting(request);

			if (response)
			{
				toastService.Notify(new(ToastType.Success, "Successfully added new meeting"));
				navigationManager.NavigateTo("/");
			}
			else
			{
				toastService.Notify(new(ToastType.Danger, "There was error with creating of meeting try again later"));
				request.Title = "";
				request.Date = default;
				request.RepetitionOfMeeting = 0;
				request.TypeOfMeeting = 0;
				request.MembersID = [];
				userForms.ForEach(u => u.IsSelected = false);
			}
		}

		
	}
}
